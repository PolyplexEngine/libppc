/**
Copyright (c) 2018 Clipsey (clipseypone@gmail.com)

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module ppc.backend.cfile;
import ppc.backend;

import core.stdc.stdlib;
import core.stdc.string;
import core.stdc.stdio;

/// Loads a raw file as a MemFile usable by the loaders.
MemFile loadFile(string filePath) {
    import std.file;
    auto data = cast(ubyte[])read(filePath);
    MemFile file;
    file.arrayptr = cast(ubyte*)&data;
    file.readhead = file.arrayptr;
    file.length = data.length;
    return file;
}

/// Loads a raw file as a MemFile usable by the loaders.
RefMemFile loadFileRef(string filePath) {
    import std.file;
    auto data = cast(ubyte[])read(filePath);
    return RefMemFile(data);
}

/// A memfile wrapper to make sure that the garbage collector 100% doesn't remove it.
struct RefMemFile {
private:
    ubyte[] data;

public:
    /// The MemFile object that the references the internally stored data of this struct.
    MemFile file;

    this(ubyte[] data) {
        this.data = data;
        file.arrayptr = cast(ubyte*)&this.data;
        file.readhead = file.arrayptr;
        file.length = data.length;
    }
}

/// A C File struct which reads from memory instead of disk.
struct MemFile {
public:
    /// Pointer to data
    ubyte* arrayptr;

    /// Pointer to read head.
    ubyte* readhead;

    /// Length of data.
    size_t length;

    /// MemFile implementation of C fseek.
    static extern (C) int seek(void* data, int64_t offset, int whence) nothrow {
        MemFile* mf = cast(MemFile*)data;
        switch (whence) {
            case SEEK_CUR:
                mf.readhead += offset;
                break;
            case SEEK_SET:
                mf.readhead = mf.arrayptr + offset;
                break;
            case SEEK_END:
                mf.readhead = mf.arrayptr + mf.length-offset;
                break;
            default:
                return -1;
        }

        if (mf.readhead < mf.arrayptr) {
            mf.readhead = mf.arrayptr;
            return -1;
        }

        if (mf.readhead > mf.arrayptr + mf.length) {
            mf.readhead = mf.arrayptr + mf.length;
        }

        return 0;
    }

    /// MemFile implementation of C fread.
    static extern (C) size_t read(void* data, size_t bytes, size_t to_read, void* source) nothrow {
        MemFile* mf = cast(MemFile*)source;
        
        size_t len = bytes*to_read;
        if (mf.readhead + len > mf.arrayptr+mf.length) {
            len = mf.arrayptr+mf.length-mf.readhead;
        }
        memcpy(data, mf.readhead, len);
        mf.readhead += len;
        return len;
    }

    /// MemFile implementation of C fclose.
    static extern (C) int close(void* data) nothrow {
        return 0;
    }

    

    /// MemFile implementation of C ftell.
    static extern (C) clong tell(void* data) nothrow {
        MemFile* mf = cast(MemFile*)data;

        // Screw C file handling, make sure that the right type of long is used on each platform...
        version(X86) {

            // Pray that stuff doesn't break with this cast.
            return cast(clong)mf.readhead-cast(clong)mf.arrayptr;

        } else version(Windows) {

            // Windows C toolchain doesn't play nice at all, pray aswell here.
            // Also why the heck would this need to exist?!?
            return cast(clong)mf.readhead-cast(clong)mf.arrayptr;

        } else version(X86_64) {

            // How it is intended to work, geez.
            return mf.readhead-mf.arrayptr;

        }
    }
    
}