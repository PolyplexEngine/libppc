/**
Copyright (c) 2018 Clipsey (clipseypone@gmail.com)

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module ppc.backend.loaders.image.png;
import ppc.backend.cfile;
import ppc.types.image;
import imageformats;

/// The bit depth of the png file
enum PNGDepth {
    Bit16,
    Bit8
}

/// The type of color in the PNG file
enum ColorType : ubyte {
    Grayscale       = 0,
    RGB             = 2,
    Indexed         = 3,
    GrayscaleAlpha  = 4,
    RGBA            = 6
}

/// The compression method used in the PNG file
enum CompressionMethod : ubyte {
    InflateDeflate = 0
}

/// The filtering method used in the PNG file
enum FilterMethod : ubyte {
    StandardAdaptive = 0
}

/// The type of interlacing used in the PNG file
enum Interlace : ubyte {
    None = 0,
    Adam7 = 1
}

/// PNG Header
struct PNGHeader {
public:
    /// Width of image
    int width;

    /// Height of image
    int height;

    /// Bit depth of image
    byte bitDepth;

    /// Color type of image
    ColorType type;

    /// Compression method of image
    CompressionMethod compressionMethod;

    /// Filtering method of image
    FilterMethod filterMethod;

    /// Interlacing method of image
    Interlace interlaceMethod;
}

/// Read PNG header from memory
PNGHeader loadPNGHeader(MemFile file) {
    return cast(PNGHeader)read_png_header_from_mem(file.arrayptr[0..file.length]);
}

/**
    Loads a PNG file from memory
    loadPNG will automatically infer which bitdepth to load as (8 and 16 bit supported)
*/
void loadPNG(MemFile file, Image* oimg) {
    immutable PNGHeader header = loadPNGHeader(file);

    (*oimg).info.imageType = ImageType.PNG;

    // Load PNG with the right bit depth.
    if (header.bitDepth >= 16) {
        IFImage16 img = read_png16_from_mem(file.arrayptr[0..file.length]);
        
        (*oimg).info.colorFormat = cast(ColorFormat)img.c;
        (*oimg).info.width = img.w;
        (*oimg).info.height = img.h;
        (*oimg).pixelData = cast(ubyte[])img.pixels;
    } else {
        IFImage img = read_png_from_mem(file.arrayptr[0..file.length]);
        
        (*oimg).info.colorFormat = cast(ColorFormat)img.c;
        (*oimg).info.width = img.w;
        (*oimg).info.height = img.h;
        (*oimg).pixelData = img.pixels;
    }
}

/**
    Loads a PNG file from memory
    loadPNG will automatically infer which bitdepth to load as (8 and 16 bit supported)
*/
Image loadPNG(MemFile file) {
    Image oimg;
    loadPNG(file, &oimg);
    return oimg;
}

/// Returns a writable PNG as a ubyte array
ubyte[] savePNG(Image img) {
    ubyte[] o;
    write_png_to_mem(img.width, img.height, o);
    return o;
}