/**
Copyright (c) 2018 Clipsey (clipseypone@gmail.com)

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module ppc.backend.signatures;
import ppc.backend.cfile;

/// Enumeration listing supported file signatures
enum FileSignature : int[] {

    /// PPC container format
    ContainerPPC = [0x50, 0x50, 0x43, 0x48, 0x65, 0x61, 0x64, 0x58],
    
    /// PSGL shader header
    ShaderPSGL = [0x50, 0x53, 0x47, 0x4C, 0x5F, 0x42, 0x65, 0x67, 0x69, 0x6E],

    /// PNG image header
    ImagePNG = [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A],

    /// BMP image header
    ImageBMP = [0x42, 0x4D],

    /// PTI image header
    ImagePTI = [0x50, 0x54, 0x49, 0x5F, 0x48, 0xFA, 0x49, 0x4C],

    /// OGG Vorbis header
    AudioOGG = [0x46, 0x67, 0x67, 0x54],

    /// WAV header 
    AudioWAV = [0x52, 0x49, 0x46, 0x46, -1, -1, -1, -1, 0x57, 0x41, 0x56, 0x45],

    /// PCM header
    AudioPCM = []
}

/// Check if the MemFile has the desired signature.
bool hasSignature(MemFile file, FileSignature sig) {

    // The point the readhead is currently at
    auto p = file.tell(&file);
    foreach(i; 0 .. sig.length) {

        // Skip arbitrary bytes (designated with numbers less than 0)
        if (sig[i] < 0) {
            file.readhead++;
            continue;
        }

        if (cast(ubyte)sig[i] != *(file.readhead)) {

            // Revert read head back to original position then return false.
            file.seek(&file, p, SeekStart);
            return false;

        }
        file.readhead++;

    }

    // Revert read head back to original position then return true.
    file.seek(&file, p, SeekStart);
    return true;

}