/**
Copyright (c) 2018 Clipsey (clipseypone@gmail.com)

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module ppc.types.image;
import ppc.backend.loaders.image.bmp;
import ppc.backend.loaders.image.png;
import ppc.backend.loaders.image.tga;
import ppc.backend.loaders.image.pti;
import ppc.backend;
import ppc.backend.cfile;
import ppc.backend.signatures;

/// The color format of the image
enum ColorFormat : ubyte{
    Grayscale       = 1,
    GrayscaleAlpha  = 2,
    RGB             = 3,
    RGBA            = 4
}

/// The type of the image
enum ImageType : ubyte {
    BMP,
    PNG,
    PTI,
    TGA
}

/// Information about the image
/// This struct is tightly packed with no padding
struct ImageInfo {
align(1):

    /// Image type
    ImageType imageType;

    /// Color format.
    ColorFormat colorFormat;

    /// Width
    size_t width;

    /// Height
    size_t height;

}

/// A generic image
public struct Image {
public:
    /// Information about the image
    ImageInfo info;

    /// Pixel Data.
    ubyte[] pixelData;

    /// Width of image
    size_t width() {
        return info.width;
    }

    /// Hight of image
    size_t height() {
        return info.height;
    }

    /// Creates an image from file
    this(string file) {
        MemFile f = loadFile(file);
        this(f);
    }

    /// Converts image to a type, returns byte array of image data (to be written to disk or otherwise manipulated)
    ubyte[] convertTo(ImageType type) {
        switch(type) {
            case ImageType.PTI:
                return savePTI(this);
            case ImageType.TGA:
                return saveTGA(this);
            case ImageType.PNG:
                return savePNG(this);
            default:
                throw new Exception("This image format is not implemented yet.");
        }
    }

    /// Creates an image from memory
    this(MemFile file) {
        if (file.hasSignature(FileSignature.ImagePNG)) {
            loadPNG(file, &this);
        } else if (file.hasSignature(FileSignature.ImagePTI)) {
            loadPTI(file, &this);
        } else {
            /// Must be TARGA, has no file signature.
            loadTGA(file, &this);
        }
    }
}